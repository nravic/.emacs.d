import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from matplotlib import cm
import main
import matplotlib.colors as colors
from mpl_toolkits.mplot3d import Axes3D  # noqa: F401 unused import
from scipy.interpolate import interp2d

filename = 'data/cnbnap.csv'
chuck_name = 'woody1'
freespin_file = 'data/cnbnap_freespin.csv'
min_threshold = 10000

df = main.data_pipeline(filename)
evalue_dict, timestamp_dict, posex_dict, posey_dict = main.get_max_eigenvalues(
    df)
posey = posey_dict[chuck_name].tolist()
posex = posex_dict[chuck_name].tolist()
evalue = evalue_dict[chuck_name]
timestamps = timestamp_dict[chuck_name].tolist()


# eliminate freespin
def freespin_t(freespin_file, chuck_name):
    df_freespin = pd.read_csv(freespin_file,
                              error_bad_lines=False,
                              low_memory=False)
    df_freespin['timestamp'] = df_freespin['timestamp'].astype('datetime64[s]')
    df_freespin.sort_values(by='timestamp', inplace=True)
    df_freespin.reset_index(inplace=True)

    df_c = df_freespin[df_freespin['id'] == chuck_name]
    df_c.sort_values(by='timestamp', inplace=True)
    df_c.reset_index(inplace=True)
    timestamps = df_c['timestamp']

    freespin_t = timestamps

    return freespin_t


x = []
y = []
z = []

freespin_timestamps = freespin_t(freespin_file, chuck_name)
for i in range(len(timestamps) - 1):
    if len(freespin_timestamps) == 0:
        pass
    else:
        for k in range(len(freespin_timestamps)):
            if abs((timestamps[i].value // 10**9) -
                   (freespin_timestamps[k].value // 10**9)) < min_threshold:
                pass
            else:
                x.append(posex[i])
                y.append(posey[i])
                z.append(evalue[i])
            break

# heatmap plotting
fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111)

x = np.array(x)
y = np.array(y)
evalues = np.array(z)

norm = plt.Normalize()
lognorm = colors.LogNorm(vmin=evalues.min(), vmax=evalues.max())
colors_lin = plt.cm.jet(norm(evalues))  # color normalized to map
colors_log = plt.cm.jet(lognorm(evalues))

# plotting
plt.scatter(x, y, c=colors_log, s=3)
plt.title(chuck_name + ' eigenvalue heatmap')
plt.show()

# averaging per map
